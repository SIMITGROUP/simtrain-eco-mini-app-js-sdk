/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-18
 * Author: --
 */

import { MiniAppApiListParam } from "../../types/bridge.type";
import { MiniAppBridgeService } from "../bridge.service";
import * as Schema from "../../openapi/backend-api";
import {
  CreateResource,
  PatchResource,
  UpdateResource,
} from "../../types/common";

export class MiniAppTuitionClassBridgeService {
  private bridge: MiniAppBridgeService;

  private resourceName = "tuitionClass";

  constructor(bridge: MiniAppBridgeService) {
    this.bridge = bridge;
  }

  async list(params?: MiniAppApiListParam | undefined) {
    return this.bridge.callApi<Schema.TuitionClass[]>(
      this.resourceName,
      "list",
      { body: params }
    );
  }

  async detail(id: string) {
    return this.bridge.callApi<Schema.TuitionClass>(
      this.resourceName,
      "detail",
      { id }
    );
  }

  async autoComplete(query: string, data: any) {
    return this.bridge.callApi<Schema.TuitionClassAutoComplete[]>(
      this.resourceName,
      "autoComplete",
      {
        query,
        body: data,
      }
    );
  }

  async patch(id: string, data: PatchResource<Schema.TuitionClass>) {
    return this.bridge.callApi<Schema.TuitionClass>(
      this.resourceName,
      "patch",
      { id, body: data }
    );
  }

  async patchMany(data: Schema.PatchManyRequest) {
    return this.bridge.callApi<Schema.UpdateManyResponse>(
      this.resourceName,
      "patchMany",
      { body: data }
    );
  }

  async getTuitionClassesWithLastSchedules(
    data: Schema.TuitionClassWithLastScheduleParam
  ) {
    return this.bridge.callApi<Schema.TuitionClassWithLastSchedule[]>(
      this.resourceName,
      "getTuitionClassesWithLastSchedules",
      {
        body: data,
      }
    );
  }

  async getTuitionClassesWithNearbySchedules(
    data: Schema.TuitionClassWithNearbyScheduleParam
  ) {
    return this.bridge.callApi<Schema.TuitionClassWithNearbySchedule[]>(
      this.resourceName,
      "getTuitionClassesWithNearbySchedules",
      {
        body: data,
      }
    );
  }

  async closeRegistrations(data: Schema.CloseTuitionClassesRegistration) {
    return this.bridge.callApi<Schema.TuitionClass[]>(
      this.resourceName,
      "closeRegistrations",
      {
        body: data,
      }
    );
  }

  openOnScreenForm(id?: string) {
    this.bridge.openOnScreenResourceForm(this.resourceName, {
      id,
    });
  }
}
