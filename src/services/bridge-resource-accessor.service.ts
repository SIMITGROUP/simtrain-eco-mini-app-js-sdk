/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2025-06-18
 * Author: --
 */

import { MiniAppResourceMap } from "../types/resource-mapper.type";
import { MiniAppBridgeService } from "./bridge.service";

import { MiniAppOrganizationBridgeService } from "../services/resources/organization-bridge.service";
import { MiniAppBranchBridgeService } from "../services/resources/branch-bridge.service";
import { MiniAppAcademySessionBridgeService } from "../services/resources/academy-session-bridge.service";
import { MiniAppAccountTransactionBridgeService } from "../services/resources/account-transaction-bridge.service";
import { MiniAppAgentBridgeService } from "../services/resources/agent-bridge.service";
import { MiniAppAnnouncementBridgeService } from "../services/resources/announcement-bridge.service";
import { MiniAppAnnouncementTypeBridgeService } from "../services/resources/announcement-type-bridge.service";
import { MiniAppAppUserAnnouncementViewBridgeService } from "../services/resources/app-user-announcement-view-bridge.service";
import { MiniAppAreaBridgeService } from "../services/resources/area-bridge.service";
import { MiniAppCategoryBridgeService } from "../services/resources/category-bridge.service";
import { MiniAppCreditNoteBridgeService } from "../services/resources/credit-note-bridge.service";
import { MiniAppMobileAppUserBridgeService } from "../services/resources/mobile-app-user-bridge.service";
import { MiniAppEnrollmentBridgeService } from "../services/resources/enrollment-bridge.service";
import { MiniAppHolidayBridgeService } from "../services/resources/holiday-bridge.service";
import { MiniAppInvoiceBridgeService } from "../services/resources/invoice-bridge.service";
import { MiniAppLevelBridgeService } from "../services/resources/level-bridge.service";
import { MiniAppMiniAppInstallationBridgeService } from "../services/resources/mini-app-installation-bridge.service";
import { MiniAppMobileAppMessageBridgeService } from "../services/resources/mobile-app-message-bridge.service";
import { MiniAppParentBridgeService } from "../services/resources/parent-bridge.service";
import { MiniAppPaymentBridgeService } from "../services/resources/payment-bridge.service";
import { MiniAppPaymentMethodBridgeService } from "../services/resources/payment-method-bridge.service";
import { MiniAppProductBridgeService } from "../services/resources/product-bridge.service";
import { MiniAppProductPackageBridgeService } from "../services/resources/product-package-bridge.service";
import { MiniAppPunchCardBridgeService } from "../services/resources/punch-card-bridge.service";
import { MiniAppRaceBridgeService } from "../services/resources/race-bridge.service";
import { MiniAppRefundBridgeService } from "../services/resources/refund-bridge.service";
import { MiniAppRefundTypeBridgeService } from "../services/resources/refund-type-bridge.service";
import { MiniAppReligionBridgeService } from "../services/resources/religion-bridge.service";
import { MiniAppRoomBridgeService } from "../services/resources/room-bridge.service";
import { MiniAppRoomTypeBridgeService } from "../services/resources/room-type-bridge.service";
import { MiniAppScheduleBridgeService } from "../services/resources/schedule-bridge.service";
import { MiniAppScheduleAttendanceBridgeService } from "../services/resources/schedule-attendance-bridge.service";
import { MiniAppSchoolBridgeService } from "../services/resources/school-bridge.service";
import { MiniAppStopEnrollmentBridgeService } from "../services/resources/stop-enrollment-bridge.service";
import { MiniAppStopReasonBridgeService } from "../services/resources/stop-reason-bridge.service";
import { MiniAppStudentBridgeService } from "../services/resources/student-bridge.service";
import { MiniAppStudentDescriptionBridgeService } from "../services/resources/student-description-bridge.service";
import { MiniAppStudentGroupBridgeService } from "../services/resources/student-group-bridge.service";
import { MiniAppStudentSourceBridgeService } from "../services/resources/student-source-bridge.service";
import { MiniAppStudentSummaryBridgeService } from "../services/resources/student-summary-bridge.service";
import { MiniAppTeacherBridgeService } from "../services/resources/teacher-bridge.service";
import { MiniAppTeacherGroupBridgeService } from "../services/resources/teacher-group-bridge.service";
import { MiniAppTuitionClassBridgeService } from "../services/resources/tuition-class-bridge.service";
import { MiniAppUserBridgeService } from "../services/resources/user-bridge.service";

export class MiniAppBridgeResourceAccessor {
  protected bridge: MiniAppBridgeService;
  protected instances: Partial<MiniAppResourceMap> = {};

  constructor() {
    this.bridge = new MiniAppBridgeService();
  }

  get organization() {
    if (!this.instances.organization) {
      this.instances.organization = new MiniAppOrganizationBridgeService(
        this.bridge
      );
    }
    return this.instances.organization;
  }
  get branch() {
    if (!this.instances.branch) {
      this.instances.branch = new MiniAppBranchBridgeService(this.bridge);
    }
    return this.instances.branch;
  }
  get academySession() {
    if (!this.instances.academySession) {
      this.instances.academySession = new MiniAppAcademySessionBridgeService(
        this.bridge
      );
    }
    return this.instances.academySession;
  }
  get accountTransaction() {
    if (!this.instances.accountTransaction) {
      this.instances.accountTransaction =
        new MiniAppAccountTransactionBridgeService(this.bridge);
    }
    return this.instances.accountTransaction;
  }
  get agent() {
    if (!this.instances.agent) {
      this.instances.agent = new MiniAppAgentBridgeService(this.bridge);
    }
    return this.instances.agent;
  }
  get announcement() {
    if (!this.instances.announcement) {
      this.instances.announcement = new MiniAppAnnouncementBridgeService(
        this.bridge
      );
    }
    return this.instances.announcement;
  }
  get announcementType() {
    if (!this.instances.announcementType) {
      this.instances.announcementType =
        new MiniAppAnnouncementTypeBridgeService(this.bridge);
    }
    return this.instances.announcementType;
  }
  get appUserAnnouncementView() {
    if (!this.instances.appUserAnnouncementView) {
      this.instances.appUserAnnouncementView =
        new MiniAppAppUserAnnouncementViewBridgeService(this.bridge);
    }
    return this.instances.appUserAnnouncementView;
  }
  get area() {
    if (!this.instances.area) {
      this.instances.area = new MiniAppAreaBridgeService(this.bridge);
    }
    return this.instances.area;
  }
  get category() {
    if (!this.instances.category) {
      this.instances.category = new MiniAppCategoryBridgeService(this.bridge);
    }
    return this.instances.category;
  }
  get creditNote() {
    if (!this.instances.creditNote) {
      this.instances.creditNote = new MiniAppCreditNoteBridgeService(
        this.bridge
      );
    }
    return this.instances.creditNote;
  }
  get mobileAppUser() {
    if (!this.instances.mobileAppUser) {
      this.instances.mobileAppUser = new MiniAppMobileAppUserBridgeService(
        this.bridge
      );
    }
    return this.instances.mobileAppUser;
  }
  get enrollment() {
    if (!this.instances.enrollment) {
      this.instances.enrollment = new MiniAppEnrollmentBridgeService(
        this.bridge
      );
    }
    return this.instances.enrollment;
  }
  get holiday() {
    if (!this.instances.holiday) {
      this.instances.holiday = new MiniAppHolidayBridgeService(this.bridge);
    }
    return this.instances.holiday;
  }
  get invoice() {
    if (!this.instances.invoice) {
      this.instances.invoice = new MiniAppInvoiceBridgeService(this.bridge);
    }
    return this.instances.invoice;
  }
  get level() {
    if (!this.instances.level) {
      this.instances.level = new MiniAppLevelBridgeService(this.bridge);
    }
    return this.instances.level;
  }
  get miniAppInstallation() {
    if (!this.instances.miniAppInstallation) {
      this.instances.miniAppInstallation =
        new MiniAppMiniAppInstallationBridgeService(this.bridge);
    }
    return this.instances.miniAppInstallation;
  }
  get mobileAppMessage() {
    if (!this.instances.mobileAppMessage) {
      this.instances.mobileAppMessage =
        new MiniAppMobileAppMessageBridgeService(this.bridge);
    }
    return this.instances.mobileAppMessage;
  }
  get parent() {
    if (!this.instances.parent) {
      this.instances.parent = new MiniAppParentBridgeService(this.bridge);
    }
    return this.instances.parent;
  }
  get payment() {
    if (!this.instances.payment) {
      this.instances.payment = new MiniAppPaymentBridgeService(this.bridge);
    }
    return this.instances.payment;
  }
  get paymentMethod() {
    if (!this.instances.paymentMethod) {
      this.instances.paymentMethod = new MiniAppPaymentMethodBridgeService(
        this.bridge
      );
    }
    return this.instances.paymentMethod;
  }
  get product() {
    if (!this.instances.product) {
      this.instances.product = new MiniAppProductBridgeService(this.bridge);
    }
    return this.instances.product;
  }
  get productPackage() {
    if (!this.instances.productPackage) {
      this.instances.productPackage = new MiniAppProductPackageBridgeService(
        this.bridge
      );
    }
    return this.instances.productPackage;
  }
  get punchCard() {
    if (!this.instances.punchCard) {
      this.instances.punchCard = new MiniAppPunchCardBridgeService(this.bridge);
    }
    return this.instances.punchCard;
  }
  get race() {
    if (!this.instances.race) {
      this.instances.race = new MiniAppRaceBridgeService(this.bridge);
    }
    return this.instances.race;
  }
  get refund() {
    if (!this.instances.refund) {
      this.instances.refund = new MiniAppRefundBridgeService(this.bridge);
    }
    return this.instances.refund;
  }
  get refundType() {
    if (!this.instances.refundType) {
      this.instances.refundType = new MiniAppRefundTypeBridgeService(
        this.bridge
      );
    }
    return this.instances.refundType;
  }
  get religion() {
    if (!this.instances.religion) {
      this.instances.religion = new MiniAppReligionBridgeService(this.bridge);
    }
    return this.instances.religion;
  }
  get room() {
    if (!this.instances.room) {
      this.instances.room = new MiniAppRoomBridgeService(this.bridge);
    }
    return this.instances.room;
  }
  get roomType() {
    if (!this.instances.roomType) {
      this.instances.roomType = new MiniAppRoomTypeBridgeService(this.bridge);
    }
    return this.instances.roomType;
  }
  get schedule() {
    if (!this.instances.schedule) {
      this.instances.schedule = new MiniAppScheduleBridgeService(this.bridge);
    }
    return this.instances.schedule;
  }
  get scheduleAttendance() {
    if (!this.instances.scheduleAttendance) {
      this.instances.scheduleAttendance =
        new MiniAppScheduleAttendanceBridgeService(this.bridge);
    }
    return this.instances.scheduleAttendance;
  }
  get school() {
    if (!this.instances.school) {
      this.instances.school = new MiniAppSchoolBridgeService(this.bridge);
    }
    return this.instances.school;
  }
  get stopEnrollment() {
    if (!this.instances.stopEnrollment) {
      this.instances.stopEnrollment = new MiniAppStopEnrollmentBridgeService(
        this.bridge
      );
    }
    return this.instances.stopEnrollment;
  }
  get stopReason() {
    if (!this.instances.stopReason) {
      this.instances.stopReason = new MiniAppStopReasonBridgeService(
        this.bridge
      );
    }
    return this.instances.stopReason;
  }
  get student() {
    if (!this.instances.student) {
      this.instances.student = new MiniAppStudentBridgeService(this.bridge);
    }
    return this.instances.student;
  }
  get studentDescription() {
    if (!this.instances.studentDescription) {
      this.instances.studentDescription =
        new MiniAppStudentDescriptionBridgeService(this.bridge);
    }
    return this.instances.studentDescription;
  }
  get studentGroup() {
    if (!this.instances.studentGroup) {
      this.instances.studentGroup = new MiniAppStudentGroupBridgeService(
        this.bridge
      );
    }
    return this.instances.studentGroup;
  }
  get studentSource() {
    if (!this.instances.studentSource) {
      this.instances.studentSource = new MiniAppStudentSourceBridgeService(
        this.bridge
      );
    }
    return this.instances.studentSource;
  }
  get studentSummary() {
    if (!this.instances.studentSummary) {
      this.instances.studentSummary = new MiniAppStudentSummaryBridgeService(
        this.bridge
      );
    }
    return this.instances.studentSummary;
  }
  get teacher() {
    if (!this.instances.teacher) {
      this.instances.teacher = new MiniAppTeacherBridgeService(this.bridge);
    }
    return this.instances.teacher;
  }
  get teacherGroup() {
    if (!this.instances.teacherGroup) {
      this.instances.teacherGroup = new MiniAppTeacherGroupBridgeService(
        this.bridge
      );
    }
    return this.instances.teacherGroup;
  }
  get tuitionClass() {
    if (!this.instances.tuitionClass) {
      this.instances.tuitionClass = new MiniAppTuitionClassBridgeService(
        this.bridge
      );
    }
    return this.instances.tuitionClass;
  }
  get user() {
    if (!this.instances.user) {
      this.instances.user = new MiniAppUserBridgeService(this.bridge);
    }
    return this.instances.user;
  }
}
